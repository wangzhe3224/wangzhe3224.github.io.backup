<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Life</title>
    <description>Programming, structures and life.</description>
    <link>http://wangzhe3224.github.io//</link>
    <atom:link href="http://wangzhe3224.github.io//zfeed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 28 Aug 2015 23:57:40 +0100</pubDate>
    <lastBuildDate>Fri, 28 Aug 2015 23:57:40 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Linux 磁盘命令 df/du/ls</title>
        <description>&lt;p&gt;今天在下载电影的时候突然只能上传，不能下载了。 产看一番发现，自己的home目录居然已经满了！
于是开始查看磁盘各个目录的空间。 最后发现罪魁祸首竟然是自己的回收站满了。。。&lt;/p&gt;

&lt;p&gt;Linux的回收站只收留在GUI操作下删除的文件以及文件夹， 他们存放在&lt;code&gt;～/.local/share/Trash/&lt;/code&gt; 目录
下，把他删除后一切回复正常了….&lt;/p&gt;

&lt;p&gt;期间用到如下几个命令查看磁盘的使用情况，记录顺便跟大家分享。&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;command-df&quot;&gt;1.Command: &lt;strong&gt;df&lt;/strong&gt;&lt;/h2&gt;

</description>
        <pubDate>Fri, 28 Aug 2015 20:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//linux/2015/08/28/linux-command1.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//linux/2015/08/28/linux-command1.html</guid>
        
        <category>command</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Lvalue and rvalue</title>
        <description>&lt;p&gt;An &lt;strong&gt;lvalue&lt;/strong&gt; is an expression that identifies a non-temporary object. An &lt;strong&gt;rvalue&lt;/strong&gt; is an expression that identifies a temporary object or is a value (such as a literal constant) not associated with any object.&lt;/p&gt;

&lt;p&gt;Tips&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;strong&gt;if an object has a name, it is an lvalue&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Look at following codes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// arr is *lvalue*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// a is *lvalue*, 100 is rvalue&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// b is *lvalue*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;rvalue.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// str is *lvalue*, &amp;quot;rvalue&amp;quot; is rvalue&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// p is *lvalue*,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we talk something about lvalue and rvalue reference. You can check &lt;a href=&quot;/c++/2015/08/25/reference-and-pointer.html&quot;&gt;Reference in c++&lt;/a&gt; to know somethin about &lt;em&gt;reference&lt;/em&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Aug 2015 08:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//c++/2015/08/28/lvalue-and-rvalue.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//c++/2015/08/28/lvalue-and-rvalue.html</guid>
        
        <category>lvalue</category>
        
        <category>reference</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Constructor in c++</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-a-constructor&quot; id=&quot;markdown-toc-what-is-a-constructor&quot;&gt;1. What is a &lt;strong&gt;Constructor&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-do-construtor-work&quot; id=&quot;markdown-toc-how-do-construtor-work&quot;&gt;2. How do construtor work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#categories-of-constructors&quot; id=&quot;markdown-toc-categories-of-constructors&quot;&gt;3.Categories of Constructors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-a-constructor&quot;&gt;1. What is a &lt;strong&gt;Constructor&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Defination:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Constructors are &lt;em&gt;special member function(s)&lt;/em&gt; of the related class. The job of a constructor is to &lt;strong&gt;initialize the data members&lt;/strong&gt; of a class object. A constructor is run whenever an object of a class type is &lt;strong&gt;created&lt;/strong&gt;.
Constructors handles what will happen when a object of a class type is created.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;A class also have other kinds of construtors to handle different ways of creating an object of a class type.&lt;br /&gt;
- Creating object: &lt;strong&gt;(normal?)constructor&lt;/strong&gt;, it creats object by initializers.  &lt;br /&gt;
- Moving object  : &lt;strong&gt;moving construtor&lt;/strong&gt;, it creats object by copying another object with the same type.     &lt;br /&gt;
- Copy object    : &lt;strong&gt;copy construtor&lt;/strong&gt;,  it creats object by moving anthter object wiht the same type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Constructors don’t have return value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;default constructor&lt;/strong&gt; is a constructor without any &lt;strong&gt;non-default&lt;/strong&gt; parameter.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-do-construtor-work&quot;&gt;2. How do construtor work&lt;/h2&gt;

&lt;p&gt;If we do not explicitly initialize a member in the constructor initializer list, that member is default initialized &lt;strong&gt;before&lt;/strong&gt; the constructor body starts executing.&lt;/p&gt;

&lt;h2 id=&quot;categories-of-constructors&quot;&gt;3.Categories of Constructors&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;Default constructor&lt;/code&gt;: The default constructor is one that takes no arguments.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Synthesized default constructor&lt;/code&gt; : The default constructor generated by the compiler.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Delegating constructor&lt;/code&gt; : A delegating constructor uses another constructor from its own class to perform its initialization. It is said to “delegate” some (or all) of its work to this other constructor.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Converting constructor&lt;/code&gt; : Every constructor which can be called with &lt;strong&gt;one non-default&lt;/strong&gt; parameter without specifier &lt;code&gt;explicit&lt;/code&gt;. This constructor defines a implicit conversion to the &lt;em&gt;class type&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 26 Aug 2015 10:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//c++/2015/08/26/constructor.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//c++/2015/08/26/constructor.html</guid>
        
        <category>constructor</category>
        
        <category>c++</category>
        
        <category>class</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Answers to C++ Primer 5th and Primer Plus 6th</title>
        <description>
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wangzhe3224/cxxPrimer5th&quot;&gt;C++ Primer 5th Answers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wangzhe3224/PrimerCxxPlusAnswers&quot;&gt;C++ Primer Plus 6th Answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还在继续整理….希望大家能够一起完善….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41gasGs%2BLCL._SX351_BO1,204,203,200_.jpg&quot; alt=&quot;C++ Primer 5th&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51hYz21HbAL._SX388_BO1,204,203,200_.jpg&quot; alt=&quot;C++ Primer Plus 6th&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 08:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//c++/2015/08/26/cppPrimerAnswers.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//c++/2015/08/26/cppPrimerAnswers.html</guid>
        
        <category>c++</category>
        
        <category>answer</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Function Overload</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-function-overload&quot; id=&quot;markdown-toc-what-is-function-overload&quot;&gt;1. What is function overload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#overloading-and-const&quot; id=&quot;markdown-toc-overloading-and-const&quot;&gt;2. Overloading and const&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#avoidint-ambiguous-overload&quot; id=&quot;markdown-toc-avoidint-ambiguous-overload&quot;&gt;3. Avoidint ambiguous overload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#overload-of-a-member-function&quot; id=&quot;markdown-toc-overload-of-a-member-function&quot;&gt;4. Overload of a member function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#overload-and-friend&quot; id=&quot;markdown-toc-overload-and-friend&quot;&gt;5. Overload and friend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-function-overload&quot;&gt;1. What is function overload&lt;/h3&gt;

&lt;blockquote&gt;

  &lt;p&gt;Functions that have the &lt;strong&gt;same name&lt;/strong&gt; but &lt;strong&gt;different parameter lists&lt;/strong&gt; and that appear &lt;strong&gt;in the same scope&lt;/strong&gt; are overloaded.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we can see, Thress key points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Same name&lt;/li&gt;
  &lt;li&gt;Different parameter list&lt;/li&gt;
  &lt;li&gt;In the same group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Can not define function overload if the these function only differ in the return type.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In C++, name lookup happens before type checking.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;Record lookup(const Account&amp;amp;);
bool lookup(const Account&amp;amp;);   // error: only the return type is different
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;overloading-and-const&quot;&gt;2. Overloading and const&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;function ignores &lt;code&gt;top level const&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;Record lookup(Phone);  
Record lookup(const Phone);   // redeclares Record lookup(Phone)  
Record lookup(Phone*);  
Record lookup(Phone* const);  // redeclares Record lookup(Phone*)  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;But &lt;code&gt;low level const&lt;/code&gt; makes difference :&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;Record lookup(Account&amp;amp;);       // function that takes a reference to Account  
Record lookup(const Account&amp;amp;); // new function that takes a const reference
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;avoidint-ambiguous-overload&quot;&gt;3. Avoidint ambiguous overload&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Compiler will try to do conversion if it can not find a best match.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inline Functions Avoid Function Call Overhead&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;overload-of-a-member-function&quot;&gt;4. Overload of a member function&lt;/h3&gt;

&lt;blockquote&gt;

  &lt;p&gt;C++ Primer:&lt;br /&gt;
We can overload a member function based on whether it is const for the same reasons that we can overload a function based on whether a pointer parameter points to const.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;const MyClass &amp;amp;func() const&lt;/code&gt;: means member function &lt;code&gt;func()&lt;/code&gt; will not change the calling object, in other words &lt;code&gt;*this&lt;/code&gt; is const.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;const&lt;/code&gt; after the function declararion means the function is not allowed to change any class members (&lt;strong&gt;except for members marked &lt;code&gt;mutable&lt;/code&gt;&lt;/strong&gt;)&lt;a href=&quot;http://stackoverflow.com/questions/3141087/what-is-meant-with-const-at-end-of-function-declaration&quot;&gt;Ref&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MyClass &amp;amp;func()&lt;/code&gt; is a overload version, which is a nonconst version.&lt;/p&gt;

&lt;h3 id=&quot;overload-and-friend&quot;&gt;5. Overload and friend&lt;/h3&gt;
&lt;p&gt;A class can make a function as a friend, so that the friend function can accsee even the private members of the class. We can do like this:&lt;br /&gt;
&lt;code&gt;cpp
extern void func();
class A {
public:
    friend void func();// make a friend with `func()`
    ...
};
&lt;/code&gt;&lt;br /&gt;
What if we have another overload func()? How to make friend with them?&lt;br /&gt;
Basiclly, we do this:&lt;br /&gt;
~~~cpp
extern void func(int n);
extern void func();// func is overloaded
class A {
public:
    friend void func();// this only makes friend with the non parameter version..
    friend void func(int n); // this makes friend with the overload version.
};
~~~&lt;/p&gt;

&lt;p&gt;The conclusion is we have to specify which one of the overloaded functions we want to make a friend.&lt;/p&gt;

&lt;p&gt;By the way, a friend declaration affects access but is not a declaration in an ordinary sense. Look at this: &lt;a href=&quot;http://www.amazon.com/Primer-5th-Edition-Stanley-Lippman/dp/0321714113&quot;&gt;C++ Primer 5th&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;struct X {
    friend void f() { /* friend function can be defined in the classbody   */ }
    X() { f(); } // error: no declaration for f
    void g();
    void h();
};
void X::g() { return f(); } // error: f hasn&#39;t been declared
void f();                   // declares the function defined inside X
void X::h() { return f(); } // ok: declaration for f is now in scope
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4059932/what-is-the-meaning-of-a-const-at-end-of-a-member-function&quot;&gt;What is the meaning of a const at end of a member function?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 25 Aug 2015 20:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//c++/2015/08/25/function-overload.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//c++/2015/08/25/function-overload.html</guid>
        
        <category>c++</category>
        
        <category>function</category>
        
        <category>overload</category>
        
        <category>pointer</category>
        
        <category>reference</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Reference in C++</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-reference&quot; id=&quot;markdown-toc-what-is-reference&quot;&gt;1.What is &lt;em&gt;reference&lt;/em&gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#define-a-reference&quot; id=&quot;markdown-toc-define-a-reference&quot;&gt;2. Define a reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-to-use-reference&quot; id=&quot;markdown-toc-why-to-use-reference&quot;&gt;3. Why to Use reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when-to-use-reference&quot; id=&quot;markdown-toc-when-to-use-reference&quot;&gt;4. When to Use reference&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#as-function-parameters&quot; id=&quot;markdown-toc-as-function-parameters&quot;&gt;4.1 As function parameters&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#as-function-return-value&quot; id=&quot;markdown-toc-as-function-return-value&quot;&gt;4.2 As function return value&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reference-to-functions&quot; id=&quot;markdown-toc-reference-to-functions&quot;&gt;4.3 reference-to-functions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference-and-const&quot; id=&quot;markdown-toc-reference-and-const&quot;&gt;5. Reference and const&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#advices-in-using-reference&quot; id=&quot;markdown-toc-advices-in-using-reference&quot;&gt;6. Advices in using reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;7. References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-reference&quot;&gt;1.What is &lt;em&gt;reference&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Reference&lt;/code&gt; is an alias (an alternate name) for an &lt;strong&gt;existing&lt;/strong&gt; object. But &lt;code&gt;reference&lt;/code&gt; is not a pointer to the object, it is actually the object itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here we mainly discuss lvalue reference&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;Lvalue and rvalue&lt;/a&gt; discussed something about lvalue and rvalue.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;reference-to-someType&lt;/strong&gt; points to the same memory location which the
 refeeing object uses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reference is not actually a &lt;strong&gt;variable&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reference is a &lt;a href=&quot;https://en.wikipedia.org/wiki/L-value&quot;&gt;&lt;strong&gt;lvalue&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reference can not &lt;strong&gt;rebound&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;A reference must be initialized when declaring it.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A reference can only does things that the refering object can do.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A reference is inherently a &lt;strong&gt;const&lt;/strong&gt;!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;define-a-reference&quot;&gt;2. Define a reference&lt;/h2&gt;

&lt;p&gt;Declare and initialize of a reference-to lvalue:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;type&amp;gt; &amp;amp; &amp;lt;name&amp;gt; = existingObj;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where, &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_type&quot;&gt;type&lt;/a&gt; and &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is an identifier whose type is &lt;strong&gt;lvalue reference-to-&amp;lt;type&amp;gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In c++ 11 there is a new feature called &lt;strong&gt;rvalue reference&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;type&amp;gt; &amp;amp;&amp;amp; &amp;lt;name&amp;gt; = existingObj;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where, &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_type&quot;&gt;type&lt;/a&gt; and &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is an identifier whose type is &lt;strong&gt;rvalue reference-to-&amp;lt;type&amp;gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;http://m.eet.com/media/1074314/0102ppfig1.gif&quot; alt=&quot;Declaration in C++&quot; /&gt; Declaration in C++. &lt;a href=&quot;http://www.embedded.com/electronics-blogs/programming-pointers/4023290/References-and-const&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;A declaration consist two parts: &lt;strong&gt;specifiers&lt;/strong&gt; and &lt;strong&gt;declarators&lt;/strong&gt;.
A declarator is the name being declared, possibly surrounded by operators such as *, &amp;amp;, [], and (). The * operator in a declarator means “pointer to,” &amp;amp; means “reference to,” and [] means “array of.”&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;e.g.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Declarator &lt;code&gt;*a[N]&lt;/code&gt; means &lt;strong&gt;array with N elements of type pointer-to&lt;/strong&gt;, rather than, &lt;strong&gt;pointer to a array of N elements&lt;/strong&gt;. Because &lt;code&gt;[]&lt;/code&gt; has higher precedence than &lt;code&gt;*&lt;/code&gt;.&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/operator_precedence&quot;&gt;perecedence in c++&lt;/a&gt; &lt;code&gt;(*a)[N]&lt;/code&gt; means &lt;strong&gt;pointer to a array of N elements&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;e.g.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;char *f(int)&lt;/code&gt; is a function returns a pointer-to char.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;char (*f)(int)&lt;/code&gt; is pointer-to function which returns a char.&lt;/p&gt;

&lt;p&gt;The operator &lt;code&gt;&amp;amp;&lt;/code&gt; has the same precedence as &lt;code&gt;*&lt;/code&gt;, thus&lt;/p&gt;

&lt;p&gt;&lt;code&gt;char &amp;amp;f(int)&lt;/code&gt; is a function returns a reference-to char.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;char (&amp;amp;f)(int)&lt;/code&gt; is a reference-to function which returns a char.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference-to const&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;int const &amp;amp;i = n&lt;/code&gt; or &lt;code&gt;const int &amp;amp;i = n&lt;/code&gt;(they are equivalent)&lt;/p&gt;

&lt;p&gt;The specifier &lt;code&gt;const&lt;/code&gt; modifies the &lt;code&gt;int&lt;/code&gt; to a &lt;code&gt;const int&lt;/code&gt;. The delaration declare that &lt;code&gt;i&lt;/code&gt; is a &lt;strong&gt;reference-to const int&lt;/strong&gt;. This expression has following structure:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;code&gt;&amp;amp;i&lt;/code&gt; represent &lt;code&gt;i&lt;/code&gt; is a &lt;strong&gt;reference-to&lt;/strong&gt; &lt;br /&gt;
 &lt;code&gt;const int&lt;/code&gt; represents &lt;strong&gt;a type&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After than declaration, &lt;code&gt;i&lt;/code&gt; represents a const int object &lt;code&gt;n&lt;/code&gt;. We can not chage i because it represents a &lt;strong&gt;const int&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int a = 5;
int &amp;amp;ra = a; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;ra&lt;/code&gt; has the type of “reference-to &lt;code&gt;int&lt;/code&gt;”.&lt;/p&gt;

&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int&amp;amp; func();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;func()&lt;/code&gt; is a function that returns a “reference-to &lt;code&gt;int&lt;/code&gt;”.&lt;/p&gt;

&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int&amp;amp; func(int&amp;amp;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;func()&lt;/code&gt; is a function with a reference parameter and return a reference.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This also called &lt;strong&gt;pass-by-reference&lt;/strong&gt; which frequently used in function.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;class Myclass {int &amp;amp;_x;//};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Myclass&lt;/code&gt; is a class with a &lt;code&gt;reference-to int&lt;/code&gt; type.&lt;/p&gt;

&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int func() {return 42;}
int (&amp;amp;xFunc)() = func;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;xFunc&lt;/code&gt; is an &lt;code&gt;alias&lt;/code&gt; for &lt;code&gt;func&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;const int &amp;amp;r = 65;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;r&lt;/code&gt; is a &lt;code&gt;const reference-to int&lt;/code&gt; which points a memory storage of value 65.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only &lt;code&gt;const reference-to&lt;/code&gt; can be assigned a literal.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-to-use-reference&quot;&gt;3. Why to Use reference&lt;/h2&gt;

&lt;p&gt;Reference works similarly to &lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/pointers/&quot;&gt;pointers&lt;/a&gt; but easier to use.&lt;/p&gt;

&lt;p&gt;The orinial reason of introducing reference is that reference types enable &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/operators&quot;&gt;overloaded&lt;/a&gt; operators to look like built-in operators, as well as act like them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    void f1(const complex* x, const complex* y) // without references
    {
        complex z = *x+*y;  // ugly
        // ...
    }
    void f2(const complex&amp;amp; x, const complex&amp;amp; y) // with references
    {
        complex z = x+y;    // better
        // ...
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/references#overview-refs&quot;&gt;Ref&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-reference&quot;&gt;4. When to Use reference&lt;/h2&gt;

&lt;p&gt;Pass reference to the function will not invoke copy, which means pass-by-reference is more efficient!&lt;/p&gt;

&lt;h4 id=&quot;as-function-parameters&quot;&gt;4.1 As function parameters&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now i = 2, j = 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we use &lt;strong&gt;call-by reference&lt;/strong&gt; to change the value of the argument.&lt;br /&gt;
We can also use &lt;strong&gt;call by reference-to-const&lt;/strong&gt; to ensure the funciton cannot chage the passing parameters.&lt;/p&gt;

&lt;h4 id=&quot;as-function-return-value&quot;&gt;4.2 As function return value&lt;/h4&gt;

&lt;p&gt;When a function returns a reference, the function call can appear on the left hand of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Assignment_operator_(C%2B%2B)&quot;&gt;assignment operator&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;class Array {
public:
  int size() const;
  float&amp;amp; operator[] (int index);
};
int main()
{
  Array a;
  for (int i = 0; i &amp;lt; a.size(); ++i)
    a[i] = 7;    // This line invokes Array::operator[](int)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/references#overview-refs&quot;&gt;Ref&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this ability, we have &lt;code&gt;method chaining&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MyObj.method1().method2()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MyObj.method1()&lt;/code&gt; will return a reference to MyObj which makes the second method2() invoked.&lt;/p&gt;

&lt;h4 id=&quot;reference-to-functions&quot;&gt;4.3 reference-to-functions&lt;/h4&gt;

&lt;p&gt;Normally, you can not pass a function to another function. But you can pass a &lt;code&gt;reference-to-function&lt;/code&gt; to a function!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcCaller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;func(x) is called by funcCaller.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;funcCaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Output:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// func(x) is called by funcCaller.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// x = 20&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reference-and-const&quot;&gt;5. Reference and const&lt;/h2&gt;

&lt;p&gt;You can declare either a &lt;code&gt;pointer-to const&lt;/code&gt;(&lt;a href=&quot;http://www.cplusplus.com/forum/beginner/143366/&quot;&gt;lowlevel const&lt;/a&gt;)   or &lt;code&gt;const pointer&lt;/code&gt; (toplevel const).&lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;only&lt;/strong&gt; define &lt;code&gt;reference-to const&lt;/code&gt;(which is similar to lowlevel const).&lt;/p&gt;

&lt;h2 id=&quot;advices-in-using-reference&quot;&gt;6. Advices in using reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;call-by-value or call-by-ref?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;

  &lt;ul&gt;
    &lt;li&gt;If you want to change the object passed, call by reference or use a pointer; e.g., void f(X&amp;amp;); or void f(X*);.&lt;/li&gt;
    &lt;li&gt;If you don’t want to change the object passed and it is big, call by const reference; e.g., void f(const X&amp;amp;);.&lt;/li&gt;
    &lt;li&gt;Otherwise, call by value; e.g. void f(X);&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Always initialize the reference&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid using references to variables whose memory are dynamically allocated as it might create unnecessary confusion regarding the clean-up of that memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;References cannot be null.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;7. References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reference_%28C%2B%2B%29&quot;&gt;Reference (C++)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2765999/what-is-a-reference-variable-in-c&quot;&gt;What is a reference variable in C++?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/references#overview-refs&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.embedded.com/electronics-blogs/programming-pointers/4024641/An-Introduction-to-References&quot;&gt;An Introduction to References&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thegeekstuff.com/2013/05/cpp-reference-variable/&quot;&gt;How to Use C++ Reference Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cprogramming.com/tutorial/references.html&quot;&gt;C++ References&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.embedded.com/electronics-blogs/programming-pointers/4023290/References-and-const&quot;&gt;References and const&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 25 Aug 2015 08:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//c++/2015/08/25/reference-and-pointer.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//c++/2015/08/25/reference-and-pointer.html</guid>
        
        <category>c++</category>
        
        <category>reference</category>
        
        <category>pointer</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Increment/Decrement operators</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-do-they-do&quot; id=&quot;markdown-toc-what-do-they-do&quot;&gt;1. What do they do&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why&quot; id=&quot;markdown-toc-why&quot;&gt;2. Why&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#define-increment-operator&quot; id=&quot;markdown-toc-define-increment-operator&quot;&gt;3. Define increment operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#c-style&quot; id=&quot;markdown-toc-c-style&quot;&gt;4. c++ style&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;Reference:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two kinds of &lt;em&gt;increment/decrement operator&lt;/em&gt; : &lt;code&gt;++&lt;/code&gt;,&lt;code&gt;--&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two forms: &lt;strong&gt;prefix&lt;/strong&gt; and &lt;strong&gt;postfix&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-do-they-do&quot;&gt;1. What do they do&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;prefix form &lt;code&gt;++i/--i&lt;/code&gt; will increment/decrement the vlaue of &lt;code&gt;i&lt;/code&gt;, then then return the incremented value.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; i = 1;
 j = ++i;
 (i is 2, j is 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;postfix form &lt;code&gt;i++/i--&lt;/code&gt; will also increment/decrement the value of &lt;code&gt;i&lt;/code&gt;, but returns the original value of &lt;code&gt;i&lt;/code&gt; before increment.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; i = 1;
 j = i++;
 (i is 2, j is 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference:&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;2. Why&lt;/h2&gt;
&lt;p&gt;Why they are different? Let’s look at the essence of these operators.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;++i&lt;/code&gt; ==&amp;gt; &lt;code&gt;T&amp;amp; operator++(T&amp;amp; a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--i&lt;/code&gt; ==&amp;gt; &lt;code&gt;T&amp;amp; operator--(T&amp;amp; a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i++&lt;/code&gt; ==&amp;gt; &lt;code&gt;T operator++(T&amp;amp; a, int)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i--&lt;/code&gt; ==&amp;gt; &lt;code&gt;T operator--(T&amp;amp; a, int)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we understand what happens. &lt;strong&gt;prefix&lt;/strong&gt; form actually returns a &lt;em&gt;reference&lt;/em&gt; of the calling object, while &lt;strong&gt;postfix&lt;/strong&gt; returns the &lt;em&gt;value&lt;/em&gt; of call object.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Because a temporary copy of the object is constructed during post-increment and post-decrement, &lt;strong&gt;pre-increment or pre-decrement operators&lt;/strong&gt; are usually more efficient in contexts where the returned value is not used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;define-increment-operator&quot;&gt;3. Define increment operator&lt;/h2&gt;
&lt;p&gt;Look at following program:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// need copy the object, slow down the speed.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;c-style&quot;&gt;4. c++ style&lt;/h2&gt;

&lt;p&gt;Usually, in c++ we use &lt;strong&gt;prefix form&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24853/what-is-the-difference-between-i-and-i#_=_&quot;&gt;What is the difference between ++i and i++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/operator_incdec&quot;&gt;Increment/decrement operators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.embedded.com/design/programming-languages-and-tools/4410601/Pre-increment-or-post-increment-in-C-C-&quot;&gt;Pre-increment or post-increment in C/C++&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//c++/2015/08/25/++i-i++.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//c++/2015/08/25/++i-i++.html</guid>
        
        <category>c++</category>
        
        <category>operator</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>一个雨天的想法</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一  生活&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;二 未来&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;×兴趣&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;×性格&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;×行业&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;×个人&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;三 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;来到伦敦已经5个多月了，有不少感受，都记下来。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一  生活&lt;/h2&gt;

&lt;p&gt;我住在泰晤士河南岸，一个叫做&lt;a href=&quot;https://en.wikipedia.org/wiki/Brixton&quot;&gt;Brixton&lt;/a&gt;的地方，是一个主要由非洲黑人和加勒比人组成的社区。Brixton这个
名字源于Brixistane，意为Brixi的石头（Brixi是撒克逊的领主）。这里的黑人比想象中的要友好很多，热爱
音乐，喜欢各种奇奇怪怪的发型。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;我的窗外&lt;/em&gt;
&lt;img src=&quot;/images/brixton.jpg&quot; alt=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;伦敦整个城市给我的感觉是比较多元的，这里充满了世界各地的文化，街道上充满了各种肤色的人，能听到来自
很多国家的语言。这是因为这个，伦敦几乎接受所有的文化。每一个人都能找到自己想要的东西，如果你想你都
可以在这个城市找到自己的位置。我也是因为这个爱上伦敦，因为它让我觉得自由，觉得生活其实可以比你想象
的多彩。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;多彩的伦敦&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.dailymail.co.uk/i/pix/2014/08/21/1408588914746_wps_1_Pedestrians_walk_through_.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;伦敦街头的艺人是伦敦的一大风景线！他们技术纯熟，水平很高。音乐，美术等等。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;壁画&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://londonbeep.com/wp-content/uploads/2015/02/London-Street-Art-Design-3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;伦敦人的工作时间比较短，下午会早早下班，周末更是很少加班。我办公室有一个美国人，他来伦敦的原因就是
觉得这里的工作比较惬意，没有那么大的压力。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二 未来&lt;/h2&gt;

&lt;p&gt;我是一个懒人，国内大学结构工程博士在读，很少计划将来。想想自己读博士的经历，也是机缘巧合，当时有一个
读博士的机会，而且时间紧迫，没来得及多想就读了博士。如今一晃，已经是博士3年纪了。&lt;/p&gt;

&lt;p&gt;可就是在这出国的半年里面，我却萌生了转行的念头：我想做IT。&lt;/p&gt;

&lt;p&gt;自己也犹豫过，因为已经在一个领域读到了博士，已经投入了极大的时间成本。从19岁读大学到28岁博士毕业，
7年多的时间，几乎是人生最有活力的7年时间。现在转行，其实毫无优势科研。可是我为什么要转行？&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;×兴趣&lt;/h4&gt;

&lt;p&gt;小时候我就比较喜欢计算机，喜欢硬件更喜欢写程序，IT更加吸引我的是所谓的开源以及黑客精神。
在黑客世界里，各组织的精神与文化都是不相同的，但有一个共同点就是对技术的崇拜与对创新的不断追求。
大学本科基本上没有好好学习什么东西，大部分时间都在玩游戏。直到上了研究生，我开始接触科学研究，
计算机程序变得越来越重要。我渐渐发现，我更加喜欢写代码，研究软件以及操作系统，享受掌控计算机的感觉。
别人喜欢手工做的东西，我喜欢写成程序;课题组里面有人电脑出了问题，大部分时候也是我帮忙解决。&lt;/p&gt;

&lt;p&gt;我喜欢IT。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;×性格&lt;/h4&gt;

&lt;p&gt;我是个内向性格的人，活在自己的世界里面压力比较小。喜欢自己安静的做事情，耐得住寂寞，有时候甚至喜欢
寂寞，所以我想太过于需要社交的工作可能是不适合我的。
做程序员恰恰是需要交际叫少的行业，大部分时间我们在与计算机打交道，计算机是没有感情的，
但是它们为命是重。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;×行业&lt;/h4&gt;

&lt;p&gt;我博士做的属于土木工程领域，不得不承认，这是一个门槛很低的行业，从业者的待遇并不高。
而IT行业依托与计算机与互联网是一个不断更新升级的行业，是一个有活力的领域。&lt;/p&gt;

&lt;p&gt;以下数据来自：&lt;a href=&quot;http://www.indeed.co.uk/&quot;&gt;Indeed&lt;/a&gt;（伦敦地区）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;程序员：薪水&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;工作数量&lt;/th&gt;
      &lt;th&gt;土木工程：薪水&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;工作数量&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;£30,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(1835)&lt;/td&gt;
      &lt;td&gt;£30,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(1972)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;£50,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(860)&lt;/td&gt;
      &lt;td&gt;£50,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(738)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;£70,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(285)&lt;/td&gt;
      &lt;td&gt;£70,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(161)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;£90,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(103)&lt;/td&gt;
      &lt;td&gt;£90,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(62)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;£110,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(44)&lt;/td&gt;
      &lt;td&gt;£110,000+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(17)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;总体上，程序员在英国有更多的工作机会，也有更多的机会获得更高的薪水。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;×个人&lt;/h4&gt;

&lt;p&gt;我并不是因为现在做的不好，才想要转行。作为一个博士，我想我的成果和成绩应该算比较丰富的，感兴趣
可以看我之前的&lt;a href=&quot;http://wangzhetju.wix.com/wangzhe&quot;&gt;博客&lt;/a&gt;。虽然不是最好，但回国找一个称心如意的工作还是不困难的。&lt;/p&gt;

&lt;p&gt;为什么还是要转？&lt;/p&gt;

&lt;p&gt;因为我想要留在伦敦，我喜欢这城市的氛围，自由多元。&lt;/p&gt;

&lt;p&gt;然而我的专业是土木工程，中国和英国有较大差别。如果还是从事本专业，留下来相对困难一些。
土木工程在英国并不是一个很蓬勃的行业，这是一个老迈的国家了。即使是中国，从我知道的消息看到，
各大设计公司也都开始裁员或者不招聘新人。市场似乎有些饱和。&lt;/p&gt;

&lt;p&gt;IT则是另一种景象。虽然我知道做IT其实很辛苦，可是做那一行不辛苦？做设计师同样是天天加班，收入
却赶不上同样工作量的IT产业，若非兴趣使然，为什么要做？？&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;三 总结&lt;/h2&gt;

&lt;p&gt;伦敦很丰富多彩，如果有机会，我会留在这里享受这里。换一个行业，换一种生活，未尝不是一件好事。&lt;/p&gt;

&lt;p&gt;谁的人生都只有一次，怎么过，都是自己决定的。如果想做什么事情的话，就去做，因为我还年轻。&lt;/p&gt;

&lt;p&gt;现在已经考过了雅思，系统的自学c++和算法，希望明年博士顺利毕业，然后来英国申请学校读计算机硕士。
为自己留下来增加筹码。&lt;/p&gt;

&lt;p&gt;最后引用一句话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Talk is cheap, Just do it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;完&lt;/center&gt;

</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//life/2015/08/24/think-in-rain.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//life/2015/08/24/think-in-rain.html</guid>
        
        <category>thinking</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Welcome to My place</title>
        <description>&lt;p&gt;Welcome to My Blog!&lt;/p&gt;

&lt;p&gt;I am a PhD canditate in &lt;a href=&quot;https://en.wikipedia.org/wiki/Structural_engineering&quot;&gt;Structure engineering&lt;/a&gt;, I like coding.&lt;/p&gt;

&lt;p&gt;I used to use &lt;a href=&quot;http://wangzhetju.wix.com/wangzhe&quot;&gt;this&lt;/a&gt; blog to present my projects. Now I am tring to be a coder…So I build site to write my coding life…&lt;/p&gt;

</description>
        <pubDate>Sat, 22 Aug 2015 16:31:19 +0100</pubDate>
        <link>http://wangzhe3224.github.io//life/2015/08/22/welcome.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//life/2015/08/22/welcome.html</guid>
        
        <category>welcome</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Emacs Useful Hotkey</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#file-command&quot; id=&quot;markdown-toc-file-command&quot;&gt;1-File Command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#copycutpaste-command&quot; id=&quot;markdown-toc-copycutpaste-command&quot;&gt;2-Copy/Cut/Paste Command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cursor-command&quot; id=&quot;markdown-toc-cursor-command&quot;&gt;3-Cursor Command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#redoundo-command&quot; id=&quot;markdown-toc-redoundo-command&quot;&gt;4-Redo/Undo Command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#buffer-management-comment&quot; id=&quot;markdown-toc-buffer-management-comment&quot;&gt;5-Buffer Management Comment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-and-replacement&quot; id=&quot;markdown-toc-find-and-replacement&quot;&gt;6-Find and Replacement&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#search&quot; id=&quot;markdown-toc-search&quot;&gt;6.1 Search&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#relpace&quot; id=&quot;markdown-toc-relpace&quot;&gt;6.2 Relpace&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-useful-command&quot; id=&quot;markdown-toc-other-useful-command&quot;&gt;7-Other useful command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// 测试中文代码
// English test
#include &amp;lt;iostream&amp;gt;

int main() {
    int i = 0;
    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;file-command&quot;&gt;1-File Command&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-x C-f&lt;/code&gt; : Opens a file, asks for the file name. If it cannot find the file, creates the file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C-w&lt;/code&gt; : Save as…&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C-s&lt;/code&gt; : Saves the file without a prompt&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x s  &lt;/code&gt; : Saves all files with a prompt&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-s C-w&lt;/code&gt; : Saves the file with a different name. Asks you for the name.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C-c&lt;/code&gt; : Exit&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-x recover-file&lt;/code&gt; : recovers the auto-saved file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;copycutpaste-command&quot;&gt;2-Copy/Cut/Paste Command&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-space&lt;/code&gt; : Marking by moving the cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-y&lt;/code&gt;     : Paste&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;c-k&lt;/code&gt;     : Delete line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-w&lt;/code&gt;     : Cut&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-w&lt;/code&gt;     : Copy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cursor-command&quot;&gt;3-Cursor Command&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-a&lt;/code&gt; : Begin of line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-e&lt;/code&gt; : End of line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-&amp;gt;&lt;/code&gt; : End of buffer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M-&amp;lt;&lt;/code&gt; : Begin of buffer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redoundo-command&quot;&gt;4-Redo/Undo Command&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-/&lt;/code&gt; : Undo&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-g C-/&lt;/code&gt; : Redo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;buffer-management-comment&quot;&gt;5-Buffer Management Comment&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-x b&lt;/code&gt;  : Switch buffer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x C-b&lt;/code&gt;: Switch buffer with showing all the opening buffers&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x 0&lt;/code&gt;  : Close current window&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x 1&lt;/code&gt;  : Leave &lt;em&gt;only&lt;/em&gt; one window&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x 2&lt;/code&gt;  : Horizontal split window&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x 3&lt;/code&gt;  : Vertical split window&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-x o&lt;/code&gt;  : Switch form different windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;find-and-replacement&quot;&gt;6-Find and Replacement&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;search&quot;&gt;6.1 Search&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-s&lt;/code&gt; : search forward&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-r&lt;/code&gt; : search backward&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-s RET&lt;/code&gt; : nonincremental search forward&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-r RET&lt;/code&gt; : ditto&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-M-s&lt;/code&gt; : regular expression search forward&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-M-r&lt;/code&gt; : … backward&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Using &lt;code&gt;M-n&lt;/code&gt; or &lt;code&gt;M-p&lt;/code&gt; to reuse previous key words.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;relpace&quot;&gt;6.2 Relpace&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;M-% string RET newstring RET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there is a marked region in the buffer, the command will only replace the string shows in the marked region.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;code&gt;y&lt;/code&gt; or &lt;code&gt;space&lt;/code&gt;: replace current string &lt;br /&gt;
&lt;code&gt;n&lt;/code&gt; or &lt;code&gt;del&lt;/code&gt;  : cancel the replace of the current string&lt;br /&gt;
&lt;code&gt;^&lt;/code&gt;           : back to the previous string      &lt;br /&gt;
&lt;code&gt;!&lt;/code&gt;           : &lt;strong&gt;replace every matched string&lt;/strong&gt; &lt;br /&gt;
&lt;code&gt;ESC&lt;/code&gt;         : quit replace command&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;other-useful-command&quot;&gt;7-Other useful command&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;M-x indent-region&lt;/code&gt; : Indents the region. &lt;strong&gt;Very handy&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 22 Aug 2015 00:00:00 +0100</pubDate>
        <link>http://wangzhe3224.github.io//emacs/2015/08/22/emacsHotKey.html</link>
        <guid isPermaLink="true">http://wangzhe3224.github.io//emacs/2015/08/22/emacsHotKey.html</guid>
        
        <category>emacs</category>
        
        
        <category>emacs</category>
        
      </item>
    
  </channel>
</rss>
